/*
 * Home.java
 *
 * Created on __DATE__, __TIME__
 */

package com.example.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Date;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import com.example.dao.NotesDao;
import com.example.model.Note;
import com.example.util.Util;

/**
 *
 * @author  __USER__
 */
public class Home extends javax.swing.JFrame {

	/** Creates new form Home */
	public Home() {
		initComponents();
		setLocationRelativeTo(null);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jButton1.setText("Notes");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2.setText("Assignment");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								layout
										.createSequentialGroup()
										.addContainerGap(155, Short.MAX_VALUE)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																jButton2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																245,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jButton1,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																245,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(140, 140, 140)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addGap(75, 75, 75).addComponent(
						jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
						javax.swing.GroupLayout.PREFERRED_SIZE).addGap(28, 28,
						28).addComponent(jButton2,
						javax.swing.GroupLayout.PREFERRED_SIZE, 45,
						javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(128, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		JPopupMenu p=new JPopupMenu();
		JMenuItem upload=new JMenuItem("Upload Notes");
		upload.setActionCommand("1");
		JMenuItem download=new JMenuItem("Download Notes");
		download.setActionCommand("2");
		JMenuItem view=new JMenuItem("View Notes");
		view.setActionCommand("3");
		 MenuItemListener menuItemListener = new MenuItemListener();

	      upload.addActionListener(menuItemListener);
	      download.addActionListener(menuItemListener);
	      view.addActionListener(menuItemListener);
	      p.add(upload);
	      p.add(download);
	      p.add(view);
	      p.show(jButton1, jButton1.getX(), jButton1.getY());
	
	}
	
	class MenuItemListener implements ActionListener {
	      public void actionPerformed(ActionEvent e) {            
	         //System.out.println(e.getActionCommand());
	      int choice=Integer.parseInt(e.getActionCommand());
	    	  switch(choice){
	    	  case 1 :
	    		  upload();
	    		  break ;
	    	  case 2 :
	    		  break;
	    	  case 3 :
	    		  view();
	    		  break;
	      }
	      
	      }    
	   } 
	NotesDao nd=NotesDao.getNotesDao();
	private void view(){
		List<Note> list=nd.getAllNotes();
		new VieFiles(list).setVisible(true);
		dispose();
	}
	
	private void upload(){
		JFileChooser f=new JFileChooser();
		f.addChoosableFileFilter(new FileNameExtensionFilter("File", "pdf", "docx"));
		int i=f.showOpenDialog(this);
		if(i==JFileChooser.APPROVE_OPTION){
			File ff=f.getSelectedFile();
			String fileName=ff.getAbsoluteFile().getName();
		    String userLocation=System.getProperty("user.home");
			File f1=new File(userLocation+File.separator+"uploadfile"+File.separator+"notes");
		    if(!f1.exists())f1.mkdirs();
		    try{
		    	FileInputStream fi=new FileInputStream(ff.getAbsolutePath());
		    	String location=f1.getAbsolutePath()+File.separator+fileName;
		    	FileOutputStream fo=new FileOutputStream(location);
		    int j=0;
		    byte b[]=new byte[1024];
		    	while((j=fi.read(b))!=-1){
		    		fo.write(b, 0, j);
		    		fo.flush();
		    	}
		    	Note note=new Note();
		    	note.setName(fileName);
		    	note.setLocation(location);
		    	note.setDate(new Date(System.currentTimeMillis()).toString());
		    	int ii=nd.insert(note);
		    	fi.close();
		    	fo.close();
		    	if(ii>0){
		    		Util.show(this,"successfully upload");
		    	}else{
		    		Util.show(this,"File uploaded failed");
		    	}
		    }catch (Exception e) {
			Util.showError(this,e.toString());
			}
		}
	}
	
	
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Home().setVisible(true);
			}
		});
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	// End of variables declaration//GEN-END:variables

}